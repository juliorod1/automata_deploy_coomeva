
**1. Variables:**

* `date=$(date +%d_%m_%Y_%H)`: Almacena la fecha actual en formato d√≠a\_mes\_a√±o\_hora (ej: 22\_05\_2025\_16).
* `hora=$(date +%d/%m/%Y" "%H:%M)`: Almacena la fecha y hora actual en formato d√≠a/mes/a√±o hora:minuto (ej: 22/05/2025 16:48).
* `servidor=$(hostname)`: Almacena el nombre del servidor donde se ejecuta el script.
* `ruta_jar=/home/scripts/automata_ansible/microservicios/cdplin93`: Define la ruta donde se esperan encontrar los archivos JAR a desplegar.
* `ruta_backup=/home/versiones`: Define la ruta donde se guardar√°n las copias de seguridad de los microservicios existentes.
* `historico=/home/scripts/automata_ansible/microserviciosP0+r\P0+r\P0+r\P0+r\P0+r\/cdplin81/historico_instalados`: Define una ruta que parece ser utilizada para mover los archivos exitosamente desplegados (aunque esto no se ve expl√≠citamente en el c√≥digo proporcionado).
* `aplicaciones="/opt/contenerizacion/microservices/fabrica-soluciones-backend.jar /opt/contenerizacion/microservices/fabrica-soluciones-cotizador.jar"`: Define una cadena que contiene los nombres de los archivos JAR de las aplicaciones que se van a desplegar, separados por espacios.
* `script=/opt/contenerizacion/microservices/scripts/subir_micros.sh`: Define la ruta de un script que se utiliza para iniciar los microservicios.
* `lista_mail=william.caicedo1@kyndryl.com`: Define la direcci√≥n de correo electr√≥nico del destinatario para las notificaciones.
* `user=root`: Define el usuario bajo el cual se realizar√°n ciertas operaciones (copia, permisos, ejecuci√≥n de script).
* `id_cambio=CRQ0000031634`: Define el ID del cambio asociado a este despliegue.
* `reinicio=0`: Define una variable para controlar si se debe realizar un reinicio de todos los microservicios (actualmente configurado en 0, lo que significa que no se reiniciar√°n).
* `apps_exitosas=()`: Declara un array para almacenar informaci√≥n sobre las aplicaciones desplegadas exitosamente.
* `apps_diferencias=()`: Declara un array para almacenar informaci√≥n sobre las aplicaciones donde se encontraron diferencias durante la validaci√≥n.

**2. Funci√≥n `validacion()`:**

* Esta funci√≥n toma como contexto la variable global `artifact` (ruta completa del archivo JAR a desplegar).
* Verifica si el archivo especificado en `$artifact` existe (`-e`).
* Si el archivo existe, llama a la funci√≥n `realizar_depliegue`.
* Si el archivo no existe, muestra un mensaje de error indicando la ruta donde se esperaba el artefacto y termina la ejecuci√≥n del script con c√≥digo de salida 1.

**3. Funci√≥n `realizar_depliegue()`:**

* Esta funci√≥n toma como contexto las variables globales `app_path` (ruta donde se encuentra el microservicio en el servidor), `app` (nombre del archivo JAR), `date` (fecha actual), `ruta_backup` (ruta para backups) y `artifact` (ruta completa del nuevo artefacto).
* **Backup del microservicio existente:**
    * Verifica si ya existe un archivo con el mismo nombre (`"$app_path"`) en la ruta de despliegue.
    * Si existe, mueve el archivo existente a la ruta de backup, renombr√°ndolo con el nombre de la aplicaci√≥n y la fecha (`"${app}_${date}"`).
    * Espera 2 segundos (`sleep 2`).
* **Validaci√≥n del backup y despliegue:**
    * Verifica si el archivo de backup se cre√≥ correctamente en la ruta de backup.
    * Si el backup es exitoso:
        * Copia el nuevo artefacto (`"$artifact"`) a la ruta de despliegue (`"$app_path"`), reemplazando la versi√≥n anterior (si exist√≠a).
        * Cambia la propiedad del archivo desplegado al usuario `root` y grupo `root`.
        * Establece los permisos del archivo desplegado a 644 (lectura y escritura para el propietario, lectura para el grupo y otros).
    * Si el backup falla, muestra un mensaje de error y la funci√≥n retorna con c√≥digo de salida 1 (indicando fallo).

**4. Funci√≥n `stop_micro()`:**

* Esta funci√≥n toma como contexto la variable global `micro` (nombre del archivo JAR del microservicio).
* Verifica si el valor de la variable `micro` termina con la extensi√≥n `.jar`.
* Si es un archivo JAR:
    * Busca el ID del proceso (PID) del microservicio que contiene el nombre del archivo `$micro` en su l√≠nea de comandos usando `pgrep -f`.
    * Si se encuentra un PID (`-n "$pid"`):
        * Muestra un mensaje indicando que se est√° bajando el microservicio y su PID.
        * Termina el proceso con la se√±al KILL (-9), redirigiendo la salida y errores a `/dev/null` (para que no se muestren en la consola).
    * Si no se encuentra un PID, la funci√≥n simplemente retorna sin hacer nada.

**5. Funci√≥n `start_micro()`:**

* Esta funci√≥n toma como contexto la variable global `user` (configurada como `root`) y `script` (ruta del script para subir microservicios).
* Ejecuta el script especificado en `$script` bajo el usuario definido en `$user` (`root` en este caso).
* Redirige la salida est√°ndar y el error est√°ndar del script a `/dev/null`.

**6. Funci√≥n `restart_all()`:**

* Esta funci√≥n toma como contexto la variable global `path` (ruta donde se encuentra el microservicio en el servidor).
* Busca los PIDs de todos los procesos Java que contengan la ruta `$path` en su l√≠nea de comandos.
* Itera sobre la lista de PIDs encontrados:
    * Si un PID es v√°lido (`-n "$pid"`), muestra un mensaje indicando que se est√° bajando el microservicio con ese PID y termina el proceso con la se√±al KILL (-9), redirigiendo la salida y errores a `/dev/null`.
* Despu√©s de detener todos los microservicios encontrados, llama a la funci√≥n `start_micro` para iniciarlos.
* Llama a la funci√≥n `enviar_correo` para enviar una notificaci√≥n.
* Termina la ejecuci√≥n del script con c√≥digo de salida 0 (indicando √©xito).

**7. Funci√≥n `valida_deploy()`:**

* Esta funci√≥n toma tres argumentos locales:
    * `nombre_app_actual`: El nombre del archivo JAR de la aplicaci√≥n.
    * `artefacto_fuente`: La ruta completa del artefacto fuente (en la ruta `$ruta_jar`).
    * `ruta_desplegada_app`: La ruta completa de la aplicaci√≥n desplegada en el servidor.
* Compara de forma silenciosa (`>/dev/null 2>&1`) los dos archivos usando `diff -q`. Si los archivos son id√©nticos, `diff` no producir√° salida y la condici√≥n ser√° verdadera.
* Si los archivos son id√©nticos:
    * Calcula la suma MD5 del archivo desplegado (`"$ruta_desplegada_app"`), extrae solo el hash usando `awk`, y lo almacena en la variable local `md5_sum_actual`.
    * A√±ade una cadena con el nombre de la aplicaci√≥n y su suma MD5 a la variable global `apps_exitosas_info`. **Ojo:** Hay un error tipogr√°fico aqu√≠. La variable deber√≠a ser `apps_exitosas` (declarada como array), pero se est√° usando `apps_exitosas_info` (que no est√° declarada como array). Esto probablemente causar√° problemas.
* Si los archivos son diferentes:
    * A√±ade el nombre de la aplicaci√≥n a la variable global `apps_con_diferencias` (declarada como array).

**8. Funci√≥n `enviar_correo()`:**

* Esta funci√≥n construye un correo electr√≥nico basado en el resultado de la validaci√≥n del despliegue.
* Define variables locales para el asunto (`asunto_final`) y el cuerpo del mensaje (`cuerpo_mensaje_final`).
* Construye detalles formateados de las aplicaciones desplegadas exitosamente (`detalles_exitosas`) e incorrectamente (`detalles_diferencias`) recorriendo los arrays `apps_exitosas_info` y `apps_con_diferencias`.
* **Construcci√≥n del asunto y cuerpo del correo:**
    * Si el array `apps_con_diferencias` est√° vac√≠o (todas las aplicaciones se desplegaron correctamente):
        * Crea un asunto indicando √©xito general.
        * Crea un cuerpo del mensaje formateado informando sobre el √©xito, la hora y la lista de aplicaciones verificadas correctamente. **Ojo:** Hay un comentario que sugiere el uso de `printf` para formatear, pero la versi√≥n comentada usa una variable `$path` que no est√° definida dentro de esta funci√≥n. La versi√≥n descomentada de `printf` parece estar mejor estructurada, aunque tambi√©n usa `$path`.
    * Si el array `apps_con_diferencias` no est√° vac√≠o (hubo fallos):
        * Crea un asunto indicando un error y el ID del cambio.
        * Crea un cuerpo del mensaje formateado informando sobre el fallo, las aplicaciones con diferencias, la hora y una recomendaci√≥n para revisar los logs.
* Imprime el asunto y el cuerpo del mensaje en la salida est√°ndar. **Importante:** Hay un comentario que indica d√≥nde ir√≠a el comando real para enviar el correo electr√≥nico utilizando `mail`. La l√≠nea comentada utiliza `mail`, pero la variable `$detalles_exitosas` en la versi√≥n comentada del cuerpo del mensaje no se corresponde con la variable usada en la versi√≥n descomentada.

**9. Bloque de ejecuci√≥n principal:**

* `lista_apps=($aplicaciones)`: Divide la cadena de nombres de aplicaciones `$aplicaciones` en un array llamado `lista_apps`, utilizando el espacio como delimitador.
* **Primer bucle para el despliegue:**
    * Itera sobre cada elemento (`app_path`) del array `lista_apps`.
    * Extrae el nombre del archivo JAR (`app`) de la ruta completa.
    * Extrae la ruta del directorio (`path`) de la ruta completa.
    * Construye la ruta completa del artefacto fuente (`artifact`) combinando `$ruta_jar` y `$app`.
    * Llama a la funci√≥n `validacion` para verificar si el artefacto existe y realizar el despliegue.
* **Condicional para el reinicio:**
    * Verifica si la variable `reinicio` es igual a 1. Si lo es, llama a la funci√≥n `restart_all` para reiniciar los microservicios.
* **Segundo bucle para detener microservicios:**
    * Itera sobre cada elemento (`micro_path`) del array `lista_apps`.
    * Extrae el nombre del archivo JAR (`micro`).
    * Llama a la funci√≥n `stop_micro` para detener el microservicio.
* Llama a la funci√≥n `start_micro` para iniciar los microservicios (probablemente despu√©s de detener las versiones anteriores).
* **Tercer bucle para la validaci√≥n del despliegue:**
    * Itera sobre cada elemento (`app_path`) del array `lista_apps`.
    * Extrae el nombre del archivo JAR (`app`).
    * Extrae la ruta del directorio (`path`).
    * Construye la ruta completa del artefacto fuente (`artifact`).
    * Llama a la funci√≥n `valida_deploy` para comparar la versi√≥n desplegada con la fuente.
* Llama a la funci√≥n `enviar_correo` para enviar el correo electr√≥nico con el resultado del despliegue.

**Resumen de la l√≥gica general:**

El script parece dise√±ado para desplegar una lista de microservicios (archivos JAR) desde una ruta local (`$ruta_jar`) a una ruta de despliegue en el servidor (`/opt/contenerizacion/microservices/`). Realiza una copia de seguridad de la versi√≥n existente, copia la nueva versi√≥n, cambia la propiedad y los permisos. Luego, detiene los microservicios antiguos (si se encuentran en ejecuci√≥n), inicia la nueva versi√≥n y finalmente valida el despliegue comparando los archivos desplegados con las fuentes, enviando una notificaci√≥n por correo electr√≥nico con el resultado.

**Posibles puntos a considerar:**

* **Manejo de errores:** El script tiene cierta l√≥gica para verificar errores (por ejemplo, en la creaci√≥n del backup), pero podr√≠a ampliarse para cubrir otros posibles fallos (por ejemplo, errores al copiar archivos, cambiar permisos, detener o iniciar microservicios).
* **Variable `historico`:** La variable `$historico` no se utiliza en el c√≥digo proporcionado. Podr√≠a haber una intenci√≥n de mover los archivos desplegados exitosamente a esta ruta, pero no se implement√≥.
* **Reinicio:** La variable `$reinicio` est√° configurada en 0, por lo que la funci√≥n `restart_all` nunca se llama en su estado actual.
* **Variable `path` en `enviar_correo()`:** La variable `$path` se utiliza en la funci√≥n `enviar_correo` pero no est√° definida dentro de ella. Probablemente se espera que la variable `$path` establecida en los bucles principales est√© disponible, pero esto podr√≠a ser un problema de √°mbito si la funci√≥n se llamara desde otro contexto.
* **Variable `apps_exitosas_info` vs. `apps_exitosas`:** Hay una inconsistencia en el nombre de la variable para las aplicaciones exitosas (uso de `apps_exitosas_info` en `valida_deploy` pero `apps_exitosas` en la declaraci√≥n). Esto deber√≠a corregirse.
* **Env√≠o de correo real:** El script actualmente solo imprime la informaci√≥n del correo en la salida est√°ndar. La l√≠nea para enviar el correo real est√° comentada.

En general, el script sigue una l√≥gica clara para automatizar el despliegue de microservicios. La inclusi√≥n de backups y la validaci√≥n son buenas pr√°cticas.
